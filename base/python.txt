#############################基本类型#############################
一、整数
Python可以处理任意大小的整数，当然包括负整数，例如：1，100，-8080，0，等等。
计算机由于使用二进制，所以，有时候用十六进制表示整数比较方便，十六进制用0x前缀和0-9，a-f表示，例如：0xff00，0xa5b4c3d2，等等。

二、浮点数
浮点数也就是小数，之所以称为浮点数，是因为按照科学记数法表示时，一个浮点数的小数点位置是可变的，比如，1.23x10^9和12.3x10^8是相等的。浮点数可以用数学写法，如1.23，3.14，-9.01，等等。但是对于很大或很小的浮点数，就必须用科学计数法表示，把10用e替代，1.23x10^9就是1.23e9，或者12.3e8，0.000012可以写成1.2e-5，等等。
整数和浮点数在计算机内部存储的方式是不同的，整数运算永远是精确的（除法难道也是精确的？是的！），而浮点数运算则可能会有四舍五入的误差。

三、字符串
字符串是以''或""括起来的任意文本，比如'abc'，"xyz"等等。请注意，''或""本身只是一种表示方式，不是字符串的一部分，因此，字符串'abc'只有a，b，c这3个字符。

四、布尔值
布尔值和布尔代数的表示完全一致，一个布尔值只有True、False两种值。在Python中，可以直接用True、False表示布尔值（请注意大小写），也可以通过布尔运算计算出来。
布尔值可以用and、or和not运算。
and 只有所有都为 True，and运算结果才是 True。
or 只要其中有一个为 True，or 运算结果就是 True。
not 它是一个单目运算符，把 True 变成 False，False 变成 True。

五、空值
用None表示。None不能理解为0，因为0是有意义的，而None是一个特殊的空值。

此外，Python还提供了列表、字典等多种数据类型，还允许创建自定义数据类型

Python3中有六个标准数据类型：
Number(数字)  支持int，float，bool，complex（复数） True和False定义成关键字了，但它们的值还是1和0
String（字符串）
List(列表)
Tuple(元组)
Sets(集合)
Dictionary（字典）


type(变量) 返回变量类型

Python的注释：  #

#############################变量#############################
#变量名必须是大小写英文、数字和下划线_的组合，且不能用数字开头，

可以为多个对象指定多个变量。例如 a,b,c=1,2,3

#动态变量： 例：
a = 123    # a是整数
print a
a = 'imooc'   # a变为字符串
print a

【#静态变量（静态语言在定义变量时必须指定变量类型，如果赋值的时候类型不匹配，就会报错）
例：int a = 123; 整型 】

内存变化：
a = 'ABC'时，Python解释器干了两件事情：
1. 在内存中创建了一个'ABC'的字符串；
2. 在内存中创建了一个名为a的变量，并把它指向'ABC'。
例：
a = 'ABC'     a――> 'ABC'
b = a         b――> 'ABC'
a = 'XYZ'     b――> 'XYZ'
print b       b=ABC

#############################字符串#############################
-----------------------------------------------------------------
8bit比特=1byte字节，一个字节能表示的最大的整数就是255（11111111）.
0-255被用来表示大小写英文字母、数字和一些符号，这个编码表被称为ASCII编码

为了统一所有文字的编码，Unicode应运而生。Unicode把所有语言都统一到一套编码里
Unicode编码转化为“可变长编码”的UTF-8编码。
UTF-8编码把一个Unicode字符根据不同的数字大小编码成1-6个字节，
常用的英文字母被编码成1个字节，汉字通常是3个字节，
只有很生僻的字符才会被编码成4-6个字节。如果你要传输的文本包含大量英文字符，用UTF-8编码就能节省空间：

计算机系统通用的字符编码工作方式：
在计算机内存中，统一使用Unicode编码，当需要保存到硬盘或者需要传输的时候，就转换为UTF-8编码。
用记事本(Unicode编码)存储 服务器(Unicode编码)  ==》 文件txt 网页等（UTF-8编码）
编辑完成后，保存的时候再把Unicode转换为UTF-8保存到文件：

-----------------------------------------------------------------
ord()函数获取字符的整数表示，
chr()函数把编码转换为对应的字符：
.upper() 小写变大写
encode()
decode()
len() str的字符数，bytes的字节数

--------------------------------------------------------------------------2.7
Python中  u'中文'表示Unicode字符串 否则为ASCII的字符串
例：
ur'''
Python的Unicode字符串支持"中文","日文","韩文"等多种语言'''

Python3测试 '中文' 和u'中文' 一样
在Python 3.x中，字符串统一为unicode，不需要加前缀 u，而以字节存储的str则必须加前缀 b

截取方式：字符串变量[头下标:尾下标] 字符串变量[:尾下标]下标之前的
 字符串变量 * 2 翻倍
例：
'Learn "Python" in imooc'
"Pyt'阿萨'on"


raw字符串：里面的字符就不需要转义了。
r'...'表示法不能表示多行字符串，也不能表示包含'和 "的字符串

多行字符串，可以用'''...'''表示例：
'''Line 1
Line 2
Line 3'''    ==  'Line 1\nLine 2\nLine 3'
多行字符串前面添加 r ，把这个多行字符串也变成一个raw字符串： r'''...'''
--------------------------------------------------------------------------3.*
bytes类型的数据 例：x = b'ABC'

以Unicode表示的str通过encode()方法可以编码为指定的bytes，例如：
'ABC'.encode('ascii')
b'ABC'
'中文'.encode('utf-8')   ==》 b'\xe4\xb8\xad\xe6\x96\x87'

'中文'.encode('ascii') #。含有中文的str无法用ASCII编码

反过来，如果我们从网络或磁盘上读取了字节流，那么读到的数据就是bytes。
要把bytes变为str，就需要用decode()
如果bytes中只有一小部分无效的字节，可以传入errors='ignore'忽略错误的字节：
b'\xe4\xb8\xad\xff'.decode('utf-8', errors='ignore')


常用的转义字符还有：
\n 表示换行
\t 表示一个制表符
\\ 表示 \ 字符本身

 
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
第一行注释是为了告诉Linux/OS X系统，这是一个Python可执行程序，Windows系统会忽略这个注释；
UnicodeDecodeError，这是因为.py文件保存的格式有问题。可以在第一行添加注释


整数运算的结果永远是精确的，而浮点数运算的结果不一定精确，因为计算机内存再大，也无法精确表示出无限循环小数
比如 0.1 换成二进制表示就是无限循环小数。


占位符	替换内容
%d	整数
%f	浮点数
%s	字符串
%x	十六进制整数
例
'growth rate: %d %%' % 7   ==》  'growth rate: 7 %'
'Age: %s. Gender: %s' % (25, True)  ==》  'Age: 25. Gender: True'

 'Hello, {0}, 成绩提升了 {1:.1f}%'.format('小明', 17.125)
'Hello, 小明, 成绩提升了 17.1%'
#############################基本运算#############################
类似java：
0、空字符串''和None看成 False，其他数值和非空字符串都看成 True
例：
a =True   
print (a and 'a=T' or 'a=F')    # 'a=T'
a =False
print (a and 'a=T' or 'a=F')    # False

/结果是浮点数
//结果是整数

#############################list tuple  dict  set#############################

长度：len(集合) 

list用[ ]所有元素，就是一个list对象。
由于Python是动态语言，所以list中包含的元素并不要求都必须是同一种数据类型，我们完全可以在list中包含各种数据：
例: a = [66, 7,88.7, True]   ### a[0]为66   a[-1] 为True  a[-2] 为7

添加元素(尾部): a = [66, 7,88.7, True]    a.append('lizhu');
添加元素: insert(index,'lizhu');
删除(尾部)并返回这个元素：pop()   删除指定：pop(index) 
修改: a[index] = 'lizhu'   index可以为负

list1.extend(list2) # extend 将列表list2直接扩展到列表list1中
list1.remove("a")
list1.reverse() 倒叙
list2.sort()# sort 按照大小顺序对列表进行排序更新（从小到大）
-----------------------------------------------tuple
tuple元组 创建后不能修改  tuple自有单个元素时要t = (66,)加逗号
例: t = (66, 7,88.7, True)  ### t[0]为66

t = ('a', 'b', ['A', 'B']); list 可以变
 
-----------------------------------------------循环语句
if 条件:
elif 条件:
else:

for 变量 in list(tuple):
    变量
while True:
   一直执行
break 退出循环  continue 继续循环

-----------------------------------------------dict 
dict 查找速度快，无论dict有10个元素还是10万个元素，查找速度都一样。而list的查找速度随着元素增加而逐渐下降。
     dict的缺点是占用内存大，还会浪费很多内容，list正好相反，占用内存小，但是查找速度慢。
key不能重复
key-value序对是没有顺序的
 key 的元素必须不可变
     用花括号{ }，然后按照 key: value, 写出来即可。最后一个 key: value 的逗号可以省略。


d = {
    'li': 95,
    'zhu': 85
}
如果存在就取值
1)if 'li' in d:
    d[li]
2)d.get('li')  不存在返回none
修改值 d[li] = 88
遍历 for key in d:
迭代值:
	d.values() 获得一个值的list  在迭代
	d.itervalues() 直接迭代
迭代k:v  
	items() 获得一个list， list包含一个或多个tuple
	iteritems() 不把dict转换成list，而是在迭代过程中不断给出 tuple

.keys 将字典中的所有（key）键 以dict_keys的类型进行返回 可进行列表转换

dic.update(dic2)#update dic2中的 键值对 如果在dic中存在，则进行修改更新，如果不存在 则进行添加
sorted(dic) #对键值对进行排序
del dic["name"]# del 根据（key）键 删除 键值对
dic.pop("name")# .pop 根据（key）键 删除 键值对 并且返回所删除的值（value）
-----------------------------------------------set
set类似java 无序，去重   任何可变对象是不能放入set中的。
s = set(['A', 'B', 'C']) 
是否存在
'B' in s
True
添加元素
s.add(4)
删除元素
s.remove(4)
例：
weekdays = set(['MON', 'TUE', 'WED', 'THU', 'FRI', 'SAT', 'SUN'])
遍历：
for name in s:

#############################函数#############################
比较函数 cmp(x, y)
int()函数可以把其他数据类型转换为整数
str()函数把其他类型转换成 str

自定义 def  函数名（参数）:  return None可以简写为return。

Python的函数返回多值其实就是返回一个tuple

递归函数： 
注意：使用递归函数需要注意防止栈溢出。 函数调用是通过栈（stack）这种数据结构实现的，每当进入一个函数调用，栈就会加一层栈帧，每当函数返回，栈就会减一层栈帧。由于栈的大小不是无限的，递归调用的次数过多，会导致栈溢出。
def fact(n):
    if n==1:
        return 1
    return n * fact(n - 1)

参数： 
可变参数的名字前面有个 * 号 表示：0个、1个或多个参数给可变参数：
传入的一组参数组装成一个tuple传递给可变参数，因此，在函数内部，直接把变量 args 看成一个 tuple 就好了。

#############################高级特性#############################
---------------------------------------------------切片|迭代

经常取指定索引范围的操作，用循环十分繁琐 所以用切片 list,tuple,字符串等
a = [66, 7, 88.7, True]
即  	a[0:3]  0到2 ; 
    	a[:]只用一个 : 表示从头到尾  (实际上可以复制出了一个新list)
    	a[::2]  每两个元素取出一个来，也就是隔一个取一个。[66, 88.7]
	a[-2:]   ##为[88.7, True]
	a[:-2]   ##为[66, 7]
	a[-3:-1] ##为[7, 88.7]
	a[-4:-1:2] ##为[66, 88.7] 在元素-4 到-1 之间每隔一个取一个


有序集合：list，tuple，str和unicode；
无序集合：set
无序集合并且具有 key-value 对：dict

对于有序集:
	enumerate()把每个元素变成 (index, element) 这样的tuple，再迭代，就同时获得了索引和元素本身。
	a = [66, 7, 88.7, True]    
	使用enumerate后变为  [(0, '66'), (1, '7'), (2, '88.7'), (3, 'True')]
for index, name in enumerate(a):
	print (index,name)
实际上是一个tuple：
for t in enumerate(a):  ###t = (0, '66')...(1, '7')....
    index = t[0] 
    name = t[1]

Python的for循环不仅可以用在list或tuple上，还可以作用在其他可迭代对象上（字符串也行）
for ... in

是否可迭代：
from collections import Iterable
isinstance('abc', Iterable) # str是否可迭代
True
isinstance([1,2,3], Iterable)
True
isinstance(123, Iterable) # 整数是否可迭代
False

---------------------------------------------------列表生成式
写列表生成式时，把要生成的元素 x * x 放到前面，后面跟 for 循环，就可以把list创建出来，十分有用


[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

[x * x for x in range(1, 11)]   ### [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]

[x * x for x in range(1, 11) if x % 2 == 0]

tds = ['<tr><td>%s</td><td>%s</td></tr>' % (name, score) for name, score in d.iteritems()]

运用列表生成式，列出当前目录下的所有文件和目录名，可以通过一行代码实现：
import os # 导入os模块
[d for d in os.listdir('.')] # os.listdir可以列出文件和目录

[m + n for m in 'ABC' for n in '123']
['A1', 'A2', 'A3', 'B1', 'B2', 'B3', 'C1', 'C2', 'C3']
等于
L = []
for m in 'ABC':
    for n in '123':
        L.append(m + n)
---------------------------------------------------生成器|迭代器
在Python中，这种一边循环一边计算的机制，称为生成器：generator

L = [x * x for x in range(10)]   ## [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]

g = (x * x for x in range(10))   ## 生成器 <generator object <genexpr> at 0x1022ef630>
next(g) ## 永远不会调用 。计算出g的下一个元素的值，没有更多的元素时，抛出StopIteration的错误
一般用for n in g:


可以被next()函数调用并不断返回下一个值的对象称为迭代器：Iterator。
isinstance()是否是Iterator对象：
from collections import Iterator
isinstance((x for x in range(10)), Iterator)
True
生成器都是Iterator对象，但list、dict、str虽然是Iterable，却不是Iterator。
把list、dict、str等Iterable变成Iterator可以使用iter()函数
isinstance(iter('abc'), Iterator)
True
isinstance(iter([]), Iterator)
True

Python的Iterator对象表示的是一个数据流，Iterator对象可以被next()函数调用并不断返回下一个数据，直到没有数据时抛出StopIteration错误。
可以把这个数据流看做是一个有序序列，但我们却不能提前知道序列的长度，只能不断通过next()函数实现按需计算下一个数据。
Iterator甚至可以表示一个无限大的数据流，例如全体自然数。而使用list是永远不可能存储全体自然数的。



