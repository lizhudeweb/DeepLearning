#############################高阶函数#############################
pyhton函数默认返回None

内层函数引用了外层函数的变量（参数也算变量），然后返回内层函数的情况，称为闭包（Closure）。

不是纯函数式编程，允许有变量，支持高阶函数，函数也可以作为变量传入，
支持闭包，有了闭包，就能够返回函数
有限度地支持匿名函数

闭包：内层函数引用了外层函数的变量（参数也算变量），然后返回内层函数的情况，称为闭包（Closure）。
	返回的函数还引用了外层函数的局部变量，所以，要正确使用闭包，就要确保引用的局部变量在函数返回后不能变


变量.__closure__
0.123


变量指向函数:
a = abs()        
a(-10)  等于 abs(-10)
函数名其实就是指向函数的变量
abs = len     abs函数名为变量指向len函数  这abs([1,2,3])  为3
高阶函数：能接受函数做参数的函数

* 和 ** 例:
*args, **kw  ====》*args表示任何多个无名参数，它是一个tuple；**kw表示关键字参数，它是一个dict。
须*args参数列要在**kw前 


map()  处理包含任意类型的 list
接收一个函数f和一个list，并把函数f依次作用在list的每个元素上，得到一个新的list（不改变原有的list）并返回。


――――――――――――reduce()
接收一个函数f（必须接收两个参数）和一个list 也可以接受第三个参数作为初始值，并对list的每个元素反复调用函数f，并返回最终结果值。
例 ：求和 用（sum()也行）
def f(x, y):
    return x + y
reduce(f, [1, 3, 5, 7, 9])  累加为25

reduce(f, [1, 3, 5, 7, 9], 100)   100为初始值 的125

――――――――――――filter()
接收一个函数 f 和一个list，用函数f对每个元素进行判断，返回True或False，filter()根据判断结果自动过滤掉不符合条件的元素，返回由符合条件元素组成的新list。
例：
删除 None 或者空字符串：
def is_not_empty(s):
    return s and len(s.strip()) > 0
filter(is_not_empty, ['test', None, '', 'str', '  ', 'END'])

s.strip(rm) 删除s字符串中的开头、结尾处的 rm 序列的字符。默认删除空白符（包括'\n', '\r', '\t', ' ')

――――――――――――sorted()
接收一个比较函数来实现自定义排序，比较函数的定义是，传入两个待比较的元素 x, y，
如果 x 应该排在 y 的前面，返回 -1，
如果 x 应该排在 y 的后面，返回 1。
如果 x 和 y 相等，返回 0。
字符串默认按照ASCII大小来比较：

def reversed_cmp(x, y):
    if x > y:
        return -1
    if x < y:
        return 1
    return 0
sorted([36, 5, 12, 9, 21], reversed_cmp)
[36, 21, 12, 9, 5]


函数返回：
Python的函数不但可以返回int、str、list、dict等数据类型，还可以返回函数！

例如，定义一个函数 f()，我们让它返回一个函数 g，可以这样写：

def f():
    print 'call f()...'
    # 定义函数g:
    def g():
        print 'call g()...'
    # 返回函数g:
    return g

#############################闭包#############################
def count():
    fs = []
    for i in range(1, 4):
        print(i)
        def f():
            print(i)
            return i*i
        fs.append(f)
    return fs

f1, f2, f3 = count()
#f1=count()[0],f2=count()[1],f3=count()[2].

print (f1())
print (f2())
#print (f3())
#print (f1, f2, f3)
print ('-------------')
def count():
    fs = []
    for i in range(1, 4):
        def f(m = i):
            return m * m
        fs.append(f)
    return fs

#f1, f2, f3 = count()

#print (f1(), f2(), f3())
c = count()[0]
print(c());


#闭包――值
def set_pass(passline):
    def cmp(val):
        if val < passline:
            print('pass')
        else:
            print('failed')
    return cmp

f_100 = set_pass(60)
f_150 = set_pass(90)
#f_100(89)
#f_150(89)

#闭包――函数
def dec(func):
    print('dec start')
    def in_dec(*arg):
        print('in_dec start')
        if len(arg) == 0:
            return 0
        for val in arg:
            if not isinstance(val, int):
                return 0
        return func(*arg)
    return in_dec

def my_sum(*arg):
    print('my_sum start')
    return sum(arg)

my_sum = dec(my_sum)
#print(my_sum(1,2,3,4,5,0))

#############################装饰器#############################
对闭包的一个使用
接闭包
def dec(func):
    print('dec start')
    def in_dec(*arg):
        print('in_dec start')
        if len(arg) == 0:
            return 0
        for val in arg:
            if not isinstance(val, int):
                return 0
        return func(*arg)
    return in_dec
@dec
def my_sum(*arg):
    print('my_sum start')
    return sum(arg)
print(my_sum(1,2,3,4,5,0))
 

def new_f(f):
    def ff(x):
        print 'clever'
        return f(x)
    return ff
-----------------------
-----------------------
def f(x):
    return x*2
f = new_f(f)
print f(3)
-----------------------
------------------------
@new_f
def f(x):
    return x*2  
print f(3)

装饰器必须在该函数之前定义@
原始函数的定义就被彻底隐藏了，只能拿到装饰后的函数
@log
@performance检测性能
@truansaction事务
@post('/rejister') 

只能一个参数
def log(f):
    def fn(x):
        print 'call ' + f.__name__ + '()...'
        return f(x)
    return fn
自适应任何参数定义的函数，可以利用Python的 *args 和 **kw，保证任意个数的参数总是能正常调用
def log(f):
    def fn(*args, **kw):
        print 'call ' + f.__name__ + '()...'
        return f(*args, **kw)
    return fn
在python中，当一个module作为整体被执行时,moduel.__name__的值将是"__main__"；而当一个module被其它module引用时，module.__name__将是module自己的名字，当然一个module被其它module引用时，其本身并不需要一个可执行的入口main了

--------------------
@log('DEBUG')
def my_func():
    pass
把上面的定义翻译成高阶函数的调用，就是：

my_func = log('DEBUG')(my_func)

log_decorator = log('DEBUG')
my_func = log_decorator(my_func)

log_decorator = log('DEBUG')
@log_decorator
def my_func():
    pass

所以，带参数的log函数首先返回一个decorator函数，再让这个decorator函数接收my_func并返回新函数：

def log(prefix):
    def log_decorator(f):
        def wrapper(*args, **kw):
            print '[%s] %s()...' % (prefix, f.__name__)
            return f(*args, **kw)
        return wrapper
    return log_decorator

@log('DEBUG')
def test():
    pass
print test()



#############################匿名函数#############################

关键字lambda ，只能有一个表达式，不写return，返回值就是该表达式的结果。

lambda x: x * x 
等于：
	def f(x):
    	return x * x
	
冒号前面的 x 表示函数参数。

sorted([1, 3, 9, 5, 0], lambda x,y: -cmp(x,y))
[9, 5, 3, 1, 0]


#############################偏函数#############################
import functools
int2 = functools.partial(int, base=2)   ## int2转二进制
int2('1000000')
64
int2('1010101')
85
functools.partial可以把一个参数多的函数变成一个参数少的新函数，少的参数需要在创建时指定默认值。

#############################模块和包#############################
模块名就是py文件名
import 包名.模块名   ==>可以使用模块中所定义的所有公开的函数、变量和类     使用：math.pow(2,10)
from math import pow, sin, log    ==>可以直接引用 pow, sin, log 这3个函数  直接使用：pow(2,10)
包下有文件__int__.py

__future__引用新版本中的特性

from math import log
from logging import log as logger   # logging
print log(10)   # 调用的是math的log
logger(10, 'import from logging')   # 调用的是logging的log

动态模块

try:
    from cStringIO import StringIO
except ImportError:
    from StringIO import StringIO
try 的作用是捕获错误，并在捕获到指定错误时执行 except 语句。

安装第三方模块：
先安装pip  2.7推荐
安装了pip  在安装第三方模块 最后导入第三方模块
pypi.python.org // pip的第三方模块的api


#############################面相对象编程#############################

类名：class 关键字 类名首写字母大写   （object） 括号里的表示从哪个类继承的
创建实例：类名+()

初始化实例属性：__init__()     
__init__() 方法:
	__init__(self, 。。。。。)也可看做是一个特殊的实例方法。
	第一个参数必须是 self（也可以用别的名字，但建议使用习惯用法），
	第一个参数被Python解释器传入了实例的引用。
	后续参数则可以自由指定，和定义函数没有任何区别。
	创建实例时，就必须要提供除 self 以外的参数：
class Person(object):
    def __init__(self, name, gender, birth):
        self.name = name
        self.gender = gender
        self.birth = birth

xiaoming = Person('Xiao Ming', 'Male', '1991-1-1')

访问限制：
如果一个属性由双下划线开头(__)，该属性就无法被外部访问

class Person(object):
    def __init__(self, name, gender, birth):
        self.name = name
        self.gender = gender
        self.__birth = birth
xiaoming = Person('Xiao Ming', 'Male', '1991-1-1')
print(xiaoming.__birth)  # Error

如果一个属性以"__xxx__"的形式定义，那它又可以被外部访问了，
以"__xxx__"定义的属性在Python的类中被称为特殊属性，有很多预定义的特殊属性可以使用，
通常我们不要把普通属性用"__xxx__"定义。
以单下划线开头的属性"_xxx"虽然也可以被外部访问，但是，按照习惯，他们不应该被外部访问

类属性：  ==》（可以动态添加和修改的）
class Person(object):
    address = 'Earth'  ##类属性 直接 类名.类属性
    def __init__(self, name):
        self.name = name

当实例属性和类属性重名时，实例属性优先级高，
实例也是拥有类属性的

实例上修改类属性，它实际上并没有修改类属性，而是给实例绑定了一个实例属性。


――――――――――――――――――――――――方法：
实例方法：
	它的第一个参数永远是 self，指向调用该方法的实例本身，其他参数和一个普通函数是完全一样的：

实例.方法名 返回的是一个绑定到实例的函数对象
实例.方法名() 调用方法

在类class中定义的实例方法也是属性，所以方法也可以动态添加到实例（使用 types.MethodType()把一个函数变为一个方法）
例：
import types
def fn_get_grade(self):
    if self.score >= 80:
        return 'A'
    if self.score >= 60:
        return 'B'
    return 'C'

class Person(object):
    def __init__(self, name, score):
        self.name = name
        self.score = score

p1 = Person('Bob', 90)
p1.get_grade = types.MethodType(fn_get_grade, p1, Person)
print (p1.get_grade())
# => A
p2 = Person('Alice', 65)
print p2.get_grade()
# ERROR: AttributeError: 'Person' object has no attribute 'get_grade'
# 因为p2实例并没有绑定get_grade

类方法：
@classmethod         ##表示绑定到类上去了
def 方法名()

类方法的第一个参数传入类本身，通常将参数命名为cls 

类方法无法获得任何实例变量，只能获得类的引用
class Person(object):
    count = 0
    @classmethod
    def how_many(cls):
        return cls.count
    def __init__(self, name):
        self.name = name
        Person.count = Person.count + 1

print (Person.how_many())
p1 = Person('Bob')
print (Person.how_many())

私有属性不可以直接被调用，但可以通过方法来调用，包括类方法和实例方法，所以如果要想调用出私有属性的值，定义方法就可以啦

――――――――――――――――――――――――继承：
class 子类名(父类名)
初始化父类的属性 super().__int__

def __int__(self, args):
	super(SubClass, self).__int__(args)
	pass               ## 又不能空着不写内容，因此可以用pass来替代占个位置

死循环：
while True:
    pass


――――――――――――――――――――――――isinstance() ――获取对象信息
可以判断一个变量的类型（是否是某种类型的实例）， 
既可以用在Python内置的数据类型如str、list、dict，也可以用在我们自定义的类，它们本质上都是数据类型。
用法：
	isinstance(实例, 类名)  返回true、false
一条继承链上，一个实例可以看成它本身的类型，也可以看成它父类的类型。

type(123)   ## <type 'int'>

s = Student('Bob', 'Male', 88)
type(s)   ##<class '__main__.Student'>

dir(s)返回所有实例属性，
包括`__class__`这类有特殊意义的属性。注意到方法`whoAmI`也是 s 的一个属性。
去掉`__xxx__`这类的特殊属性，
只保留我们自己定义的属性？回顾一下filter()函数的用法。
dir()返回的属性是字符串列表, 要获取或者设置属性，getattr() 和 setattr( )
例：
getattr(s, 'age')，#获取age属性，但是属性不存在，报错
getattr(s, 'age'， 20)，#获取age属性，如果属性不存在，就默认返回20
setattr(s, 'age', 'Adam')


――――――――――――――――――――――――多态：
这是动态语言和静态语言（例如Java）最大的差别之一。
动态语言调用实例方法，不检查类型，只要方法存在，参数正确，就可以调用
多态：实例.方法()

实例优先调用自身类定义的方法。如果没有定义，则顺着继承链向上查找，直到在某个父类中找到为止


――――――――――――――――――――――――多继承：
Python的网络服务器有TCPServer、UDPServer、UnixStreamServer、UnixDatagramServer，而服务器运行模式有 多进程ForkingMixin 和 多线程ThreadingMixin两种。

class A(object):
    def __init__(self, a):
        print 'init A...'
        self.a = a

class B(A):
    def __init__(self, a):
        super(B, self).__init__(a)
        print 'init B...'

class C(A):
    def __init__(self, a):
        super(C, self).__init__(a)
        print 'init C...'

class D(B, C):
    def __init__(self, a):
        super(D, self).__init__(a)
        print 'init D...'



#############################特殊方法#############################

――――――――――――――――――――――――数据类型.__str__()
任何数据类型都有一个特殊方法

特殊方法 print的__str__
	len的__len__
	cmp的__cmp__

定义在class中，
编写特殊方法：
有关联的特殊方法都必须实现：
如  __getattr__ 和  __setattr__ 和 __delattr__

例：
class Person1(object):
    def __init__(self, name, gender):
        self.name = name
        self.gender = gender
    def __str__(self):
        return '(Person: %s, %s)' % (self.name, self.gender)
    __repr__ = __str__

p = Person1('Bob', 'male')
print (p)

对 int、str 等内置数据类型排序时， sorted() 按照默认的比较函数 cmp 排序，
但是，如果对一组 Student 类的实例排序时，就必须提供我们自己的特殊方法 __cmp__()：python3取消__cmp__()

len()
class Students(object):
    def __init__(self, *args):
        self.names = args
    def __len__(self):
        return len(self.names)

――――――――――――――――――――――――数学运算：__add__等
要表示有理数，可以用一个Rational类来表示：
class Rational(object):
    def __init__(self, p, q):
        self.p = p
        self.q = q
    def __add__(self, r):
        return Rational(self.p * r.q + self.q * r.p, self.q * r.q)
    def __str__(self):
        return '%s/%s' % (self.p, self.q)
    __repr__ = __str__
r1 = Rational(1,3)
r2 = Rational(1,2)
print(r1)    
print(r2)
print(r1 + r2) #1/3 +1/2 调用__add__

p、q 都是整数，表示有理数 p/q。

减法运算：__sub__
乘法运算：__mul__
除法运算：__div__

求最大公约数算法：
(1)辗转相除法
两整数a和b：
① a%b得余数c
② 若c=0，则b即为两数的最大公约数，结束
③ 若c≠0，则a=b，b=c，再回去执行①
(2)相减法
两整数a和b：
① 若a>b，则a=a-b
② 若a<b，则b=b-a
③ 若a=b，则a（或b）即为两数的最大公约数，结束
④ 若a≠b，则再回去执行①
(3)穷举法：
① i= a b中的小数
② 若a，b能同时被i整除，则i即为最大公约数，结束
③ i--，再回去执行②
――――――――――――――――――――――――类型转换：__int__ 等
例：
class Rational(object):
    def __init__(self, p, q):
        self.p = p
        self.q = q
    def __int__(self):       # int转化
        return self.p // self.q

print (int(Rational(7, 2)))
print (int(Rational(1, 3)))

――――――――――――――――――――――――__slots__
表示一个类允许的属性列表：
	目的是限制当前类所能拥有的属性，
	如果不需要添加任意动态的属性，使用__slots__也能节省内存。
例：
class Student(object):
    __slots__ = ('name', 'gender', 'score')
    def __init__(self, name, gender, score):
        self.name = name
        self.gender = gender
        self.score = score
――――――――――――――――――――――――__name__
所有的函数都是可调用对象。
f = abs
f.__name__  ## 'abs'

f(-123)    ## 123

一个类实例也可以变成一个可调用对象，只需要实现一个特殊方法__call__()。
class Person(object):
    def __init__(self, name, gender):
        self.name = name
        self.gender = gender
    def __call__(self, friend):
        print ('My name is %s...' % self.name)
        print ('My friend is %s...' % friend)
p = Person('Bob', 'male')   
p('Tim')

――――――――――――――――――――――――赋值
s = Student('Bob', 59)

① s.score = 60

②s.get_score() 和 s.set_score()

③
class Student(object):
    def __init__(self, name, score):
        self.name = name
        self.__score = score
    @property
    def score(self):
        return self.__score
    @score.setter
    def score(self, score):
        if score < 0 or score > 100:
            raise ValueError('invalid score')
        self.__score = score
s = Student('Bob', 59)
s.score = 60
print (s.score)

s.score = 1000

@property---这是关键字，固定格式，能让方法当“属性”用。
@score.setter---前面的"score"是@property紧跟的下面定义的那个方法的名字，
"setter"是关键字，这种“@ + 方法名字 + . + setter”是个固定格式与@property搭配使用。


这里注意到一个细节，就是把score定义成了私有属性__score，
而我们根据前面的知识了解到私有属性在类外是不能够直接访问的，
必须通过方法调用的方式，而装饰器函数又恰好把方法装饰成了属性调用，
所以这里调用属性其实就是调用方法，返回的是私有属性




